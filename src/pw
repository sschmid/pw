#!/usr/bin/env bash
# shellcheck disable=SC1090,SC1091,SC2119
set -euo pipefail

require_bash() {
  cat <<EOF
pw requires bash-4.2 or later.
Installed: ${BASH_VERSION}

Please install bash:

  brew install bash
EOF
  exit 1
}

((BASH_VERSINFO[0] >= 4)) || require_bash
if ((BASH_VERSINFO[0] == 4)); then
  ((BASH_VERSINFO[1] >= 2)) || require_bash
fi

if ! command -v fzf > /dev/null; then
  cat << EOF
pw requires fzf. Please install fzf:

  brew install fzf

see https://github.com/junegunn/fzf
EOF
  exit 1
fi

declare -i PW_GEN_LENGTH PW_CLIP_TIME
: "${PW_RC:="${HOME}/.pwrc"}"
: "${PW_GEN_LENGTH:=35}"
: "${PW_CLIP_TIME:=45}"

[[ ! -f "${PW_RC}" ]] && cat << 'EOF' > "${PW_RC}"
PW_KEYCHAINS=(login.keychain)
EOF
source "${PW_RC}"
[[ -v PW_KEYCHAINS ]] || PW_KEYCHAINS=(login.keychain)

PW_HOME="${BASH_SOURCE[0]}"
while [[ -L "${PW_HOME}" ]]; do
  PW_HOME="$(readlink "${PW_HOME}")"
done
PW_HOME="$(cd "$(dirname "${PW_HOME}")/.." && pwd)"

PW_NAME=""
PW_ACCOUNT=""
declare -ig PW_FZF=0

pw::help() {
  cat << EOF
██████╗ ██╗    ██╗
██╔══██╗██║    ██║
██████╔╝██║ █╗ ██║
██╔═══╝ ██║███╗██║
██║     ╚███╔███╔╝
╚═╝      ╚══╝╚══╝  $(cat "${PW_HOME}/version.txt")

usage: pw [--help | -h]
          [-p] [-k <keychain>] [<commands>]

options:
  -p              print password instead of copying
  -k <keychain>   search in given keychain

commands:
  [-p] no command             copy (or print) password using fuzzy finder
  [-p] <name> [<account>]     copy (or print) password
  init                        create keychain (default: login.keychain)
  add <name> [<account>]      add entry (leave password empty to generate one)
  edit [<name>] [<account>]   edit entry (leave password empty to generate one)
  rm [<name>] [<account>]     remove entry
  ls                          list all entries
  gen                         generate password
  open                        open keychain in Keychain Access
  lock                        lock keychain
  unlock                      unlock keychain
  update                      update pw

customization:
  PW_KEYCHAIN                 keychain to use when not specified with -k (default: login.keychain)
  PW_GEN_LENGTH               length of generated passwords (default: 35)
  PW_CLIP_TIME                time in seconds after which the password is cleared from the clipboard (default: 45)
EOF
}

pw::select_db() {
  if [[ -v PW_KEYCHAIN ]]; then
    : # do nothing
  elif ((${#PW_KEYCHAINS[@]} == 1)); then
    PW_KEYCHAIN="${PW_KEYCHAINS[0]}"
  else
    PW_KEYCHAIN="$(printf '%s\n' "${PW_KEYCHAINS[@]}" | fzf --prompt="db> " --layout=reverse --info=hidden)"
  fi

  local -a filetypes=()
  while read -r file; do
    source "${file}"
    filetypes+=("$(filetype)")
    if register; then
      source "$(dirname "${file}")/plugin.bash"
      return
    fi
  done < <(find "${PW_HOME}/src/plugins" -type f -name "hook.bash" -mindepth 2 -maxdepth 2)

  if [[ -f "${PW_KEYCHAIN}" ]]; then
    cat << EOF
Could not detect plugin for ${PW_KEYCHAIN}
Supported file types are:
${filetypes[*]}
EOF
  else
    echo "pw: ${PW_KEYCHAIN}: No such file"
  fi

  exit 1
}

pw::gen() {
  local -i print=$1; shift
  # shellcheck disable=SC2005
  if ((print))
  then echo "$(LC_CTYPE=C tr -dc '[:alnum:][:punct:]' < /dev/urandom | head -c ${PW_GEN_LENGTH})"
  else echo -n "$(LC_CTYPE=C tr -dc '[:alnum:][:punct:]' < /dev/urandom | head -c ${PW_GEN_LENGTH})" | pbcopy
  fi
}

pw::update() {
  pushd "${PW_HOME}" > /dev/null || exit 1
    git pull origin main
  popd > /dev/null || exit 1
}

pw::select_entry_with_prompt() {
  local fzf_prompt="$1"; shift
  if (($#)); then
    PW_NAME="$1"
    PW_ACCOUNT="${2:-}"
    PW_FZF=0
  else
    local name account
    while IFS=$'\t' read -r name account; do
      PW_NAME="$(echo "${name}" | xargs)"
      PW_ACCOUNT="$(echo "${account}" | xargs)"
    done < <(pw::list | fzf --prompt="${fzf_prompt}> " --layout=reverse --info=hidden)
    [[ -n "${PW_NAME}" && -n "${PW_ACCOUNT}" ]] || exit 1
    PW_FZF=1
  fi
}

main() {
  local -i print=0
  while (($#)); do case "$1" in
    -p) shift; print=1 ;;
    -k) PW_KEYCHAIN="$2"; shift 2 ;;
    --help | -h) pw::help; return ;;
    --) shift; break ;; *) break ;;
  esac done

  if (($#)); then
    case "$1" in
      init) shift; pw::init ;;
      add) shift; pw::select_db; pw::add "$@" ;;
      edit) shift; pw::select_db; pw::edit "$@" ;;
      rm) shift; pw::select_db; pw::rm "$@" ;;
      ls) shift; pw::select_db; pw::list ;;
      gen) shift; pw::gen ${print} ;;
      open) shift; pw::select_db; pw::open ;;
      lock) shift; pw::select_db; pw::lock ;;
      unlock) shift; pw::select_db; pw::unlock ;;
      update) pw::update ;;
      *) pw::select_db; pw::get ${print} "$@" ;;
    esac
  else
    pw::select_db
    pw::get ${print}
  fi
}

[[ "${BASH_SOURCE[0]}" != "$0" ]] || main "$@"
