#!/usr/bin/env bash
set -euo pipefail

PW_HOME="${BASH_SOURCE[0]}"
while [[ -L "${PW_HOME}" ]]; do
  PW_HOME="$(readlink "${PW_HOME}")"
done
PW_HOME="$(cd "$(dirname "${PW_HOME}")/.." && pwd)"

: "${PW_KEYCHAIN:="pw.keychain"}"

pw::init() { security create-keychain -P "${PW_KEYCHAIN}"; }
pw::open() { open -a "Keychain Access" ~/Library/Keychains/"${PW_KEYCHAIN}-db"; }
pw::lock() { security lock-keychain "${PW_KEYCHAIN}"; }
pw::unlock() { security unlock-keychain "${PW_KEYCHAIN}"; }

pw::add() {
  local name="$1" account="${2:-}" password password2
  read -rsp "Enter password for ${name}: " password; echo
  read -rsp "Retype password for ${name}: " password2; echo
  if [[ "${password}" != "${password2}" ]]; then
    echo "Error: the entered passwords do not match."
    exit 1
  fi
  security add-generic-password -a "${account}" -s "${name}" -w "${password}" "${PW_KEYCHAIN}"
}

pw::get() {
  local name="$1" account="${2:-}"
  if ((PW_COPY));then
    security find-generic-password ${account:+-a ${account}} -s "${name}" -w "${PW_KEYCHAIN}" | pbcopy
  else
    security find-generic-password ${account:+-a ${account}} -s "${name}" -w "${PW_KEYCHAIN}"
  fi
}

pw::rm() {
  local name account
  local -i remove=1
  if (($#)); then
    name="$1" account="${2:-}"
  else
    local n a k
    while IFS=$'\t' read -r n a k; do
      name="${n%% *}" account="${a%% *}"
      [[ "${account}" == "<NULL>" ]] && account=""
      pw::keychain "${k}"
    done < <(pw::fzf)
    read -rp "Do you really want to remove ${name} (y / n): "
    [[ "${REPLY}" != "y" ]] && remove=0
  fi
  ((remove)) && security delete-generic-password ${account:+-a ${account}} -s "${name}" "${PW_KEYCHAIN}"
}

pw::list() {
  local dump
  local -a names accounts keychains
  if ((PW_ALL)); then
    mapfile -t keychains < <(security list-keychains -d user | tr -d \")
  else
    keychains=("${PW_KEYCHAIN}")
  fi
  for keychain in "${keychains[@]}"; do
    keychain="${keychain##*/}"
    dump="$(security dump-keychain "${keychain}")"
    mapfile -t names < <(echo "${dump}" | grep "svce" | awk -F= '{print $2}' | tr -d \")
    mapfile -t accounts < <(echo "${dump}" | grep "acct" | awk -F= '{print $2}' | tr -d \")
    for ((i = 0; i < ${#names[@]}; i++)); do
      printf "%-16s\t%-16s\t%s\n" "${names[i]}" "${accounts[i]}" "${keychain}"
    done | sort
  done
}

pw::update() {
  pushd "${PW_HOME}" > /dev/null || exit 1
    git pull origin main
  popd > /dev/null || exit 1
}

pw::help() {
  cat << EOF
██████╗ ██╗    ██╗
██╔══██╗██║    ██║
██████╔╝██║ █╗ ██║
██╔═══╝ ██║███╗██║
██║     ╚███╔███╔╝
╚═╝      ╚══╝╚══╝  $(cat "${PW_HOME}/version.txt")

usage: pw [-c] [-a | -k <keychain>] [<commands>]

options:
  -c              copy password instead of printing
  -a              search in all user keychains
  -k <keychain>   search in given keychain

commands:
  [-c] no command           print (or copy) password using fuzzy finder
  [-c] <name> [<account>]   print (or copy) password
  init                      create keychain (default: pw.keychain)
  open                      open keychain in Keychain Access
  lock                      lock keychain
  unlock                    unlock keychain
  add <name> [<account>]    add entry
  rm [<name> <account>]     remove entry
  ls                        list all entries
  update                    update pw
  help                      show this
EOF
}

pw::keychain() {
  PW_KEYCHAIN="$1"
  [[ "${PW_KEYCHAIN}" == *.keychain ]] || PW_KEYCHAIN+=.keychain
}

pw::fzf() {
  pw::list | fzf --height=40% --layout=reverse --border --info=hidden
}

declare -ig PW_COPY=0
declare -ig PW_ALL=0

main() {
  while (($#)); do case "$1" in
    -c) shift; PW_COPY=1 ;;
    -a) shift; PW_ALL=1 ;;
    -k) pw::keychain "$2"; shift 2 ;;
    --) shift; break ;; *) break ;;
  esac done

  if (($#)); then
    case "$1" in
      init) shift; pw::init ;;
      open) shift; pw::open ;;
      lock) shift; pw::lock ;;
      unlock) shift; pw::unlock ;;
      add) shift; pw::add "$@" ;;
      rm) shift; pw::rm "$@" ;;
      ls) shift; pw::list ;;
      update) pw::update ;;
      help) pw::help ;;
      *) pw::get "$@" ;;
    esac
  else
    local name account keychain
    while IFS=$'\t' read -r name account keychain; do
      pw::keychain "${keychain}"
      pw::get "${name%% *}" "${account%% *}"
    done < <(pw::fzf)
  fi
}

main "$@"
