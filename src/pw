#!/usr/bin/env bash
# shellcheck disable=SC1090
set -euo pipefail

require_bash() {
  cat <<EOF
pw requires bash-4.2 or later.
Installed: ${BASH_VERSION}

Please install bash:

  brew install bash
EOF
  exit 1
}

((BASH_VERSINFO[0] >= 4)) || require_bash
if ((BASH_VERSINFO[0] == 4)); then
  ((BASH_VERSINFO[1] >= 2)) || require_bash
fi

if ! command -v fzf > /dev/null; then
  cat << EOF
pw requires fzf. Please install fzf:

  brew install fzf

see https://github.com/junegunn/fzf
EOF
  exit 1
fi

declare -i PW_GEN_LENGTH PW_CLIP_TIME
: "${PW_RC:="${HOME}/.pwrc"}"
: "${PW_GEN_LENGTH:=35}"
: "${PW_CLIP_TIME:=45}"

[[ ! -f "${PW_RC}" ]] && cat << 'EOF' > "${PW_RC}"
PW_KEYCHAINS=(login)
EOF
source "${PW_RC}"
[[ -v PW_KEYCHAINS ]] || PW_KEYCHAINS=(login)

PW_HOME="${BASH_SOURCE[0]}"
while [[ -L "${PW_HOME}" ]]; do
  PW_HOME="$(readlink "${PW_HOME}")"
done
PW_HOME="$(cd "$(dirname "${PW_HOME}")/.." && pwd)"

PW_NAME=""
PW_ACCOUNT=""
declare -ig PW_FZF=0

pw::help() {
  cat << EOF
██████╗ ██╗    ██╗
██╔══██╗██║    ██║
██████╔╝██║ █╗ ██║
██╔═══╝ ██║███╗██║
██║     ╚███╔███╔╝
╚═╝      ╚══╝╚══╝  $(cat "${PW_HOME}/version.txt")

usage: pw [--help | -h]
          [-p] [-a | -k <keychain>] [<commands>]

options:
  -p              print password instead of copying
  -a              search in all user keychains
  -k <keychain>   search in given keychain

commands:
  [-p] no command             copy (or print) password using fuzzy finder
  [-p] <name> [<account>]     copy (or print) password
  init                        create keychain (default: login.keychain)
  add <name> [<account>]      add entry (leave password empty to generate one)
  edit [<name>] [<account>]   edit entry (leave password empty to generate one)
  rm [<name>] [<account>]     remove entry
  ls                          list all entries
  gen                         generate password
  open                        open keychain in Keychain Access
  lock                        lock keychain
  unlock                      unlock keychain
  update                      update pw

customization:
  PW_KEYCHAIN                 keychain to use when not specified with -k (default: login.keychain)
  PW_GEN_LENGTH               length of generated passwords (default: 35)
  PW_CLIP_TIME                time in seconds after which the password is cleared from the clipboard (default: 45)
EOF
}

pw::select_db() {
  ((PW_ALL)) && return
  if [[ -v PW_KEYCHAIN ]]; then
    : # do nothing
  elif ((${#PW_KEYCHAINS[@]} == 1)); then
    PW_KEYCHAIN="${PW_KEYCHAINS[0]}"
  else
    PW_KEYCHAIN="$(printf '%s\n' "${PW_KEYCHAINS[@]}" | fzf --prompt="db> " --layout=reverse --info=hidden)"
  fi
  [[ "${PW_KEYCHAIN}" == *.keychain ]] || PW_KEYCHAIN+=.keychain
}

pw::init() { security create-keychain -P "${PW_KEYCHAIN}"; }
pw::open() { open -a "Keychain Access" ~/Library/Keychains/"${PW_KEYCHAIN}-db"; }
pw::lock() { security lock-keychain "${PW_KEYCHAIN}"; }
pw::unlock() { security unlock-keychain "${PW_KEYCHAIN}"; }

pw::add() {
  local -i edit=$1; shift
  ((edit)) || unset edit
  PW_NAME="$1" PW_ACCOUNT="${2:-}"
  local password retype
  read -rsp "Enter password for ${PW_NAME}: " password; echo
  if [[ -n "${password}" ]]; then
    read -rsp "Retype password for ${PW_NAME}: " retype; echo
    if [[ "${retype}" != "${password}" ]]; then
      echo "Error: the entered passwords do not match."
      exit 1
    fi
  else
    password="$(pw::gen 1)"
  fi
  security add-generic-password ${edit:+-U} -a "${PW_ACCOUNT}" -s "${PW_NAME}" -w "${password}" "${PW_KEYCHAIN}"
}

pw::edit() {
  pw::select_entry edit "$@"
  pw::add 1 "${PW_NAME}" "${PW_ACCOUNT}"
}

pw::get() {
  local -i print=$1; shift
  ((PW_ALL)) || local keychain="${PW_KEYCHAIN}"
  if ((print))
  then pw::select_entry print "$@"
  else pw::select_entry copy "$@"
  fi
  local password
  password="$(security find-generic-password ${PW_ACCOUNT:+-a "${PW_ACCOUNT}"} -s "${PW_NAME}" -w ${keychain:+"${keychain}"})"
  if ((print)); then
    echo "${password}"
  else
    local p
    p="pw-$(id -u)"
    pkill -f "^$p" 2> /dev/null && sleep 0.5
    echo -n "${password}" | pbcopy
    (
      ( exec -a "${p}" sleep "${PW_CLIP_TIME}" )
      [[ "$(pbpaste)" == "${password}" ]] && echo -n | pbcopy
    ) > /dev/null 2>&1 & disown
  fi
}

pw::rm() {
  local -i remove=1
  pw::select_entry remove "$@"
  if ((PW_FZF)); then
    read -rp "Do you really want to remove ${PW_NAME:+"'${PW_NAME}' "}${PW_ACCOUNT:+"'${PW_ACCOUNT}' "}from ${PW_KEYCHAIN}? (y / n): "
    [[ "${REPLY}" == "y" ]] || remove=0
  fi
  ((!remove)) || security delete-generic-password -a "${PW_ACCOUNT}" -s "${PW_NAME}" "${PW_KEYCHAIN}" > /dev/null
}

pw::list() {
  local dump
  local -a names accounts keychains name account
  if ((PW_ALL))
  then mapfile -t keychains < <(security list-keychains -d user | tr -d \")
  else keychains=("${PW_KEYCHAIN}")
  fi
  for keychain in "${keychains[@]}"; do
    keychain="${keychain##*/}"
    dump="$(security dump-keychain "${keychain}")"
    mapfile -t names < <(echo "${dump}" | grep "svce" | awk -F= '{print $2}' | tr -d \")
    mapfile -t accounts < <(echo "${dump}" | grep "acct" | awk -F= '{print $2}' | tr -d \")
    for ((i = 0; i < ${#names[@]}; i++)); do
      name="${names[i]}"
      account="${accounts[i]}"
      [[ "${name}" == "<NULL>" ]] && name=""
      [[ "${account}" == "<NULL>" ]] && account=""
      printf "%-28s\t%-16s\t%s\n" "${name}" "${account}" "${keychain}"
    done | sort
  done
}

pw::gen() {
  local -i print=$1; shift
  # shellcheck disable=SC2005
  if ((print))
  then echo "$(LC_CTYPE=C tr -dc '[:alnum:][:punct:]' < /dev/urandom | head -c ${PW_GEN_LENGTH})"
  else echo -n "$(LC_CTYPE=C tr -dc '[:alnum:][:punct:]' < /dev/urandom | head -c ${PW_GEN_LENGTH})" | pbcopy
  fi
}

pw::update() {
  pushd "${PW_HOME}" > /dev/null || exit 1
    git pull origin main
  popd > /dev/null || exit 1
}

pw::select_entry() {
  local fzf_prompt="$1"; shift
  if (($#))
  then PW_NAME="$1" PW_ACCOUNT="${2:-}" PW_FZF=0
  else pw::fzf "${fzf_prompt}" && PW_FZF=1
  fi
}

pw::fzf() {
  local fzf_prompt="$1" name account keychain
  while IFS=$'\t' read -r name account keychain; do
    PW_NAME="$(echo "${name}" | xargs)"
    PW_ACCOUNT="$(echo "${account}" | xargs)"
    PW_KEYCHAIN="${keychain}"
  done < <(pw::list | fzf --prompt="${fzf_prompt}> " --layout=reverse --info=hidden)
  if [[ -z "${PW_NAME}" && -z "${PW_ACCOUNT}" ]]; then exit 1; fi
}

declare -ig PW_ALL=0

main() {
  local -i print=0
  while (($#)); do case "$1" in
    -p) shift; print=1 ;;
    -a) shift; PW_ALL=1 ;;
    -k)
      PW_KEYCHAIN="$2"; shift 2;
      [[ "${PW_KEYCHAIN}" == *.keychain ]] || PW_KEYCHAIN+=.keychain ;;
    --help | -h) pw::help; return ;;
    --) shift; break ;; *) break ;;
  esac done

  if (($#)); then
    case "$1" in
      init) shift; pw::init ;;
      add) shift; pw::select_db; pw::add 0 "$@" ;;
      edit) shift; pw::select_db; pw::edit "$@" ;;
      rm) shift; pw::select_db; pw::rm "$@" ;;
      ls) shift; pw::select_db; pw::list ;;
      gen) shift; pw::gen ${print} ;;
      open) shift; pw::select_db; pw::open ;;
      lock) shift; pw::select_db; pw::lock ;;
      unlock) shift; pw::select_db; pw::unlock ;;
      update) pw::update ;;
      *) pw::select_db; pw::get ${print} "$@" ;;
    esac
  else
    pw::select_db
    pw::get ${print}
  fi
}

[[ "${BASH_SOURCE[0]}" != "$0" ]] || main "$@"
