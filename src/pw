#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'

PW_HOME="${BASH_SOURCE[0]}"
while [[ -L "${PW_HOME}" ]]; do
  PW_HOME="$(readlink "${PW_HOME}")"
done
PW_HOME="$(cd "$(dirname "${PW_HOME}")/.." && pwd)"

: "${PW_KEYCHAIN:="pw.keychain"}"
declare -ig PW_ALL=0

pw::init() {
  security create-keychain -P "${1:-"${PW_KEYCHAIN}"}"
}

pw::open() {
  open -a "Keychain Access" ~/Library/Keychains/"${1:-"${PW_KEYCHAIN}"}-db"
}

pw::lock() {
  security lock-keychain "${1:-"${PW_KEYCHAIN}"}"
}

pw::add() {
  local name="$1" account="${2:-"${USER}"}" keychain="${3:-"${PW_KEYCHAIN}"}" password password2
  read -rsp "Enter password for ${name}: " password; echo
  read -rsp "Retype password for ${name}: " password2; echo
  if [[ "${password}" != "${password2}" ]]; then
    echo "Error: the entered passwords do not match."
    exit 1
  fi
  security add-generic-password -a "${account}" -s "${name}" -w "${password}" "${keychain}"
}

pw::rm() {
  local name account keychain
  local -i remove=1
  if (($#)); then
    name="$1" account="${2:-"${USER}"}" keychain="${3:-"${PW_KEYCHAIN}"}"
  else
    local n a k
    while IFS=$'\t' read -r n a k; do
      name="${n%% *}" account="${a%% *}" keychain="${k%% *}"
    done < <(pw::fzf)
    read -rp "Do you really want to remove ${name} (y / n): "
    [[ "${REPLY}" != "y" ]] && remove=0
  fi
  ((remove)) && security delete-generic-password -a "${account}" -s "${name}" "${keychain}"
}

pw::print() {
  local name="$1" account="${2:-"${USER}"}" keychain="${3:-"${PW_KEYCHAIN}"}"
  security find-generic-password -a "${account}" -s "${name}" -w "${keychain}"
}

pw::copy() {
  pw::print "$@" | pbcopy
}

pw::list() {
  local dump
  local -a names accounts keychains
  if ((PW_ALL)); then
    mapfile -t keychains < <(security list-keychains -d user | tr -d \")
  else
    keychains=("${1:-"${PW_KEYCHAIN}"}")
  fi
  for keychain in "${keychains[@]}"; do
    keychain="${keychain##*/}"
    dump="$(security dump-keychain "${keychain}")"
    mapfile -t names < <(echo "${dump}" | grep "svce" | awk -F= '{print $2}' | tr -d \")
    mapfile -t accounts < <(echo "${dump}" | grep "acct" | awk -F= '{print $2}' | tr -d \")
    for ((i = 0; i < ${#names[@]}; i++)); do
      printf "%-16s\t%-16s\t%s\n" "${names[i]}" "${accounts[i]}" "${keychain}"
    done
  done
}

pw::fzf() {
  pw::list | fzf --height=40% --layout=reverse --border --info=hidden
}

pw::update() {
  pushd "${PW_HOME}" > /dev/null || exit 1
    git pull origin main
  popd > /dev/null || exit 1
}

pw::help() {
  cat << EOF
pw $(cat "${PW_HOME}/version.txt")

usage:
  pw [-a | -k <keychain>]                    search entry and copy password
  pw <name> [<account> <keychain>]           print password for entry
  pw init [<keychain>]                       create keychain (default: pw.keychain)
  pw open [<keychain>]                       open keychain in Keychain Access
  pw lock [<keychain>]                       lock keychain
  pw add <name> [<account> <keychain>]       add entry
  pw [-a] rm [<name> <account> <keychain>]   remove entry
  pw [-a] ls [<keychain>]                    list all entries
  pw update                                  update pw
  pw help                                    show this
EOF
}

main() {
  while (($#)); do case "$1" in
    -a) shift; PW_ALL=1 ;;
    -k) PW_KEYCHAIN="$2"; shift 2 ;;
    --) shift; break ;; *) break ;;
  esac done

  if (($#)); then
    case "$1" in
      init) shift; pw::init "$@" ;;
      open) shift; pw::open "$@" ;;
      lock) shift; pw::lock "$@" ;;
      add) shift; pw::add "$@" ;;
      rm) shift; pw::rm "$@" ;;
      ls) shift; pw::list "$@" ;;
      update) pw::update ;;
      help) pw::help ;;
      *) pw::print "$@" ;;
    esac
  else
    local name account keychain
    while IFS=$'\t' read -r name account keychain; do
      pw::copy "${name%% *}" "${account%% *}" "${keychain}"
    done < <(pw::fzf)
  fi
}

main "$@"
